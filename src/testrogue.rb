##Ruby Classes we will need

#Game Object
#Most general object; all objects inherit from it

#Engine object holds the object list, level directory, current level, current view, etc...
#To change the current level you can do Engine#changelevel with the floor number. If the floor number is new, a level is autogenerated
#To create or destroy an object, you signal Engine#create or Engine#destroy with the id
#Drawing is done based on the View object
#View objects have a target, and it renders the level in an 80x25 box trying to center on the target's xy
#We also want to be able to draw a UI on top of our view

#So for example, a monster wants to know if there's a hostile player nearby
#He queries the level for all 'Characters' within a radius

#Heres how the game loop operates
#Once in the level, the game is tick-time based
#If the player's tick counter is 0, the game waits for a valid input from the player
#Any input then increases its tick counter by some amount
#Every loop, the game cycles through all ticking objects, decreasing their tick counter by 1.
#If an object reaches 0 on the tick counter, the game asks for an action.
#The resulting tick cost of that action is added to its tick counter, and the loop continues
#For this system to work, all 'ticking objects' need to be kept in an array to be iterated over
#That means we have multiple references to objects: Theyre stored in the tickingObjects array and the Level grid
#So when we have to destroy objects, we need to update all their storage containers
#So here is the scaffolding for our game

require_relative 'engine'

#CONSTANTS
#NUMPAD
#		7	8	9
#		4	5	6
#		1	2	3
#
#		==
#
#		KEY_A1	KEY_A2	KEY_A3
#		KEY_B1	KEY_B2	KEY_B3
#		KEY_C1	KEY_C2	KEY_C3
KEY_A2 = 450
KEY_B1 = 452
KEY_B3 = 454
KEY_C2 = 456

#FUNCTION KEYS 
KEY_F1 = 265
KEY_F2 = 266
KEY_F3 = 267
KEY_F4 = 268

KEY_F5 = 269
KEY_F6 = 270
KEY_F7 = 271
KEY_F8 = 272

KEY_F9 = 273
KEY_F10 = 274
KEY_F11 = 275
KEY_F12 = 276

def showHelpScreen
	win = Curses::Window.new(10, 20,0,0)
	win.attron(color_pair(3)) { win.box('|', '-') }
	win.setpos(1,1)
	
	win.attron(color_pair(1)) do
	win.addstr("This is the help dialog")
	end
	
	#win.refresh
	refresh
	win.keypad true
	win.getch
	#win.close
end
	
engine = Engine.new
engine.start
	##Handle input
#	nextchr = getch
#	
#	case nextchr
#		when 'q' then isRunning = false
#		when  KEY_A1..KEY_C3 then
#			case nextchr
#				when KEY_C1, KEY_B1, KEY_A1 then xpos -= 1
#				when KEY_C3, KEY_B3, KEY_A3 then xpos += 1
#			end
#			case nextchr 
#				when KEY_A1..KEY_A3 then ypos -= 1
#				when KEY_C1..KEY_C3 then ypos += 1
#			end
#			
#		when KEY_LEFT then xpos -= 1
#		when KEY_RIGHT then xpos += 1
#		when KEY_UP then ypos -= 1
#		when KEY_DOWN then ypos += 1
#		
#		when ?q then
#			isRunning = false
#			close_screen
#			nocbreak #Resume cooking input
#		when KEY_F1 then
#			showHelpScreen
#	end 
#	
#end

